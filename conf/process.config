import java.nio.file.Paths

singularity {
	enabled = true
	runOptions = "-B /camp"
}

process {

	publish_mode = "copy"
	publish_overwrite = true

	executor = "slurm"
	//executor = "local"
	cpus = 2
	memory = "60G"
	time = "10:00:00"

	//errorStrategy = "retry"
	//maxErrors = 3
	errorStrategy = "finish"
	
	publishDir = [
		path: { Paths.get( params.out_dir ) },
		mode: publish_mode,
		overwrite: publish_overwrite
	]

	withLabel: gpu {

		module = "CUDA/10.1.105"
		module = "GCCcore/8.2.0"

		executor = "slurm"
		clusterOptions = "--partition=gpu --gres=gpu:1"
	}

	withLabel: pucks {
		publishDir = [
			path: { Paths.get( params.out_dir , "files" , "pucks" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withLabel: demultiplexing {
		publishDir = [
			path: { Paths.get( params.out_dir , "files" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withLabel: tagging {
		publishDir = [
			path: { Paths.get( params.out_dir , "files" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withLabel: quality_control {
		publishDir = [
			path: { Paths.get( params.out_dir , "qc" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withLabel: plot {

		executor = "local"
		container = "assets/containers/python/python.sif"

		publishDir = [
			path: { Paths.get( params.out_dir , "qc" , "plots" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	////////////////////////////////////////////////////////////////////////////

	withLabel: sequencing {
		container = "assets/containers/sequencing/sequencing.sif"
	}

	withLabel: python {
		container = "assets/containers/cotidianus/cotidianus.sif"
	}

	withLabel: python_2 {
		container = "assets/containers/python/python.sif"
	}

	withLabel: samtools {
		container = "assets/containers/samtools/samtools.sif"
	}

	withLabel: r {
		//container = "assets/r-babs/r-babs.sif"
		module = "R/3.6.0-foss-2016b-BABS"
	}

	///////////////////////////////////////////////////////////////////////////

	withName: bcl2fastq {

		module = "bcl2fastq2/2.20.0-foss-2018b"
		executor = "slurm"
		//executor = "local"
		time = "06:00:00"
		memory = "10 GB"
		cpus = 12
	}

	withName: star {

		module = "STAR/2.5.2a-foss-2016b"

		cpus = 12

		executor = "local"
		memory = "200G"
		//memory = "300G"
		//time = "03:00:00"
		//clusterOptions = "--partition=hmem"
	}

	withName: mark_duplicates {

		//cpus = 2
		//executor = "local"
		//memory = "60G"

		cpus = 8
		executor = "slurm"
		memory = "80G"

		//executor = "slurm"
		//memory = "400G"
		//time = "06:00:00"
		//clusterOptions = "--partition=hmem"
	}

	withName: bam_tag {

		//cpus = 2
		//executor = "local"
		//memory = "60G"

		cpus = 8
		executor = "slurm"
		memory = "80G"

		//executor = "slurm"
		//memory = "400G"
		//time = "06:00:00"
		//clusterOptions = "--partition=hmem"
	}

	withName: bam_tag_hmem {

		//cpus = 2
		//executor = "local"
		//memory = "60G"

		//cpus = 32
		//executor = "slurm"
		//memory = "250G"

		executor = "slurm"
		cpus = 32
		memory = "600G"
		time = "24:00:00"
		clusterOptions = "--partition=hmem"
	}

	withName: bam_metrics {

		//cpus = 8
		//executor = "local"
		//memory = "60G"

		cpus = 8
		executor = "slurm"
		memory = "80G"

		//executor = "slurm"
		//memory = "400G"
		//time = "06:00:00"
		//clusterOptions = "--partition=hmem"
	}

	withName: bam_metrics_hmem {

		//cpus = 2
		//executor = "local"
		//memory = "60G"

		cpus = 32
		executor = "slurm"
		memory = "250G"

		//executor = "slurm"
		//memory = "400G"
		//time = "06:00:00"
		//clusterOptions = "--partition=hmem"
	}
}
